AWSTemplateFormatVersion: 2010-09-09

Description: This Templates Creats Resources For Ventura Proposed Prod Environment
 
Metadata:
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC CIDR"
        Parameters: 
          - ProdVPCCIDR
      - 
        Label: 
          default: "Subnet CIDR"
        Parameters: 
          - NatALBSubnetCIDR
          - ALBSubnetCIDR
          - WebSubnet1CIDR
          - WebSubnet2CIDR
          - AppSubnet1CIDR
          - AppSubnet2CIDR
          - DBSubnet1CIDR
          - DBSubnet2CIDR
      - 
        Label: 
          default: "SSH CIDR"
        Parameters:
          - SSHLocation

Parameters:
  ProdVPCCIDR:
    Default: 20.0.0.0/16
    Description: Please enter the IP range (CIDR notation) for this VpcCIDR
    Type: String
 
  NatALBSubnetCIDR:
    Default: 20.0.1.0/28
    Description: Please enter the IP range (CIDR notation) for the Public Subnet 1
    Type: String

  ALBSubnetCIDR:
    Default: 20.0.3.0/28
    Description: Please enter the IP range (CIDR notation) for the Public Subnet 2
    Type: String

  WebSubnet1CIDR:
    Default: 20.0.5.0/23
    Description: Please enter the IP range (CIDR notation) for the Web Subnet 1
    Type: String

  WebSubnet2CIDR:
    Default: 20.0.10.0/23
    Description: Please enter the IP range (CIDR notation) for the Web Subnet 2
    Type: String

  AppSubnet1CIDR:
    Default: 20.0.15.0/23
    Description: Please enter the IP range (CIDR notation) for the App Subnet 1
    Type: String

  AppSubnet2CIDR:
    Default: 20.0.20.0/23
    Description: Please enter the IP range (CIDR notation) for the App Subnet 2
    Type: String

  DBSubnet1CIDR:
    Default: 20.0.25.0/27
    Description: Please enter the IP range (CIDR notation) for the DB Subnet 1
    Type: String

  DBSubnet2CIDR:
    Default: 20.0.30.0/27
    Description: Please enter the IP range (CIDR notation) for the DB Subnet 2
    Type: String
    
  SSHLocation: 
      Description: The IP address range that can SSH to the EC2 instance
      Type: String
      MinLength: "9"
      MaxLength: "18"
      Default: "0.0.0.0/0"
      AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
      ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
 
  VPC:
      Type: AWS::EC2::VPC
      Properties: 
        CidrBlock: !Ref ProdVPCCIDR
        EnableDnsHostnames: true
        EnableDnsSupport: true
        InstanceTenancy: default
        Tags: 
          - Key: Name
            Value: Prod VPC

  InternetGateway:
      Type: AWS::EC2::InternetGateway
     
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties: 
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC

  NatALBSubnet:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1a"
        CidrBlock: !Ref NatALBSubnetCIDR
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: Name
            Value: Nat-ALB-Subnet-1
        VpcId: !Ref VPC
      
  ALBSubnet:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1b"
        CidrBlock: !Ref ALBSubnetCIDR
        MapPublicIpOnLaunch: true
        Tags: 
          - Key: Name
            Value: ALB-Subnet-2
        VpcId: !Ref VPC

  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties: 
        Tags: 
          - Key: Name
            Value: Public Route Table
        VpcId: !Ref VPC

  PublicRoute:
      Type: AWS::EC2::Route
      Properties: 
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
        RouteTableId: !Ref PublicRouteTable

  NatALBSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref NatALBSubnet
        
  ALBSubnetRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties: 
        RouteTableId: !Ref PublicRouteTable
        SubnetId: !Ref ALBSubnet

  WebSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1a"
        CidrBlock: !Ref WebSubnet1CIDR
        MapPublicIpOnLaunch: False
        Tags: 
          - Key: Name
            Value: Web-Subnet-1
        VpcId: !Ref VPC

  WebSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1b"
        CidrBlock: !Ref WebSubnet2CIDR
        MapPublicIpOnLaunch: False
        Tags: 
          - Key: Name
            Value: Web-Subnet-2
        VpcId: !Ref VPC

  AppSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1a"
        CidrBlock: !Ref AppSubnet1CIDR
        MapPublicIpOnLaunch: False
        Tags: 
          - Key: Name
            Value: App-Subnet-1
        VpcId: !Ref VPC

  
  AppSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1b"
        CidrBlock: !Ref AppSubnet2CIDR
        MapPublicIpOnLaunch: False
        Tags: 
          - Key: Name
            Value: App-Subnet-2
        VpcId: !Ref VPC

  DBSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1a"
        CidrBlock: !Ref DBSubnet1CIDR
        MapPublicIpOnLaunch: False
        Tags: 
          - Key: Name
            Value: DB-Subnet-1
        VpcId: !Ref VPC

  DBSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: "us-east-1b"
        CidrBlock: !Ref DBSubnet2CIDR
        MapPublicIpOnLaunch: False
        Tags: 
          - Key: Name
            Value: DB-Subnet-2
        VpcId: !Ref VPC

  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access on port 80/443
      SecurityGroupIngress:
        - IpProtocol: tcp 
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
      Tags:
          - Key: Name
            Value: SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/443 locked down to the ALB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80 
        ToPort: 80
        SourceSecurityGroupId: !Ref  ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC

  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open Database for access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: Name
          Value: Database Security Group
      VpcId: !Ref VPC


Outputs:

  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC
      
  NatALBSubnet:
    Description: Nat Alb Subnet
    Export:
      Name: !Sub ${AWS::StackName}-NatALBSubnet
    Value: !Ref NatALBSubnet

  ALBSubnet:
    Description: Alb Subnet
    Export:
      Name: !Sub ${AWS::StackName}-ALBSubnet
    Value: !Ref ALBSubnet

  WebSubnet1:
    Description: Web Subnet 1 ID
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnet1
    Value: !Ref WebSubnet1
      
  WebSubnet2:
    Description: Web Subnet 2
    Export:
      Name: !Sub ${AWS::StackName}-WebSubnet2
    Value: !Ref WebSubnet2

  AppSubnet1:
    Description: App Subnet 1
    Export:
      Name: !Sub ${AWS::StackName}-AppSubnet1
    Value: !Ref AppSubnet1

  AppSubnet2:
    Description: App Subnet 2
    Export:
      Name: !Sub ${AWS::StackName}-AppSubnet2
    Value: !Ref AppSubnet2
      
  DBSubnet1:
    Description: DB Subnet 1
    Export:
      Name: !Sub ${AWS::StackName}-DBSubnet1
    Value: !Ref DBSubnet1

  DBSubnet2:
    Description: DB Subnet 2
    Export:
      Name: !Sub ${AWS::StackName}-DBSubnet2
    Value: !Ref DBSubnet2

  ALBSecurityGroup:
    Description: ALB Security Group id
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup

  SSHSecurityGroup:
    Description: SSH SecurityGroup ID
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup
    Value: !Ref SSHSecurityGroup
      
  WebServerSecurityGroup:
    Description: Web Server Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup
    Value: !Ref WebServerSecurityGroup

  DataBaseSecurityGroup:
    Description: DataBase Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-DataBaseSecurityGroup
    Value: !Ref DataBaseSecurityGroup